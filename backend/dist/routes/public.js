"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const user_1 = require("../models/user");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const JWT_SECRET = process.env.JWT_SECRET || "secret";
const router = (0, express_1.Router)();
router.post("/api/login", async (req, res) => {
    // login
    console.log(req.body);
    if (!req.body || !req.body.email || !req.body.password) {
        return res.status(400).json({
            message: "Missing email or password",
        });
    }
    const { email, password } = req.body;
    const user = await user_1.default.findOne({ email });
    if (!user) {
        return res.status(400).json({
            message: "User not found",
        });
    }
    const isPasswordCorrect = await bcrypt.compare(password, user.password);
    if (!isPasswordCorrect) {
        return res.status(400).json({
            message: "Password is incorrect",
        });
    }
    const token = jwt.sign({ userId: user._id }, JWT_SECRET);
    return res.json({
        token,
    });
});
router.post("/api/register", async (req, res) => {
    // register
    const { email, password } = req.body;
    // check if email is already in use
    const user2 = await user_1.default.findOne({ email });
    if (user2) {
        return res.status(400).json({
            message: "Email is already in use",
        });
    }
    const user = new user_1.default({
        email,
        password: await bcrypt.hash(password, 10),
    });
    await user.save();
    return res.status(201).json({
        message: "User created",
    });
});
exports.default = router;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsicm91dGVzL3B1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFpQztBQUNqQyx5Q0FBa0M7QUFDbEMsaUNBQWlDO0FBQ2pDLG9DQUFvQztBQUVwQyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxRQUFRLENBQUM7QUFFdEQsTUFBTSxNQUFNLEdBQUcsSUFBQSxnQkFBTSxHQUFFLENBQUM7QUFPeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUMzQyxRQUFRO0lBQ1IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDckIsSUFBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1FBQ3JELE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDMUIsT0FBTyxFQUFFLDJCQUEyQjtTQUNyQyxDQUFDLENBQUM7S0FDSjtJQUNELE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsR0FBRyxDQUFDLElBQW9CLENBQUM7SUFDckQsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUMzQyxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1QsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUMxQixPQUFPLEVBQUUsZ0JBQWdCO1NBQzFCLENBQUMsQ0FBQTtLQUNIO0lBQ0QsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4RSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7UUFDdEIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUMxQixPQUFPLEVBQUUsdUJBQXVCO1NBQ2pDLENBQUMsQ0FBQTtLQUNIO0lBQ0QsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDekQsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ2QsS0FBSztLQUNOLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBTUgsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUM5QyxXQUFXO0lBRVgsTUFBTSxFQUFDLEtBQUssRUFBRSxRQUFRLEVBQUMsR0FBRyxHQUFHLENBQUMsSUFBZ0IsQ0FBQztJQUMvQyxtQ0FBbUM7SUFFbkMsTUFBTSxLQUFLLEdBQUcsTUFBTSxjQUFJLENBQUMsT0FBTyxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQztJQUMxQyxJQUFHLEtBQUssRUFBRTtRQUNSLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDMUIsT0FBTyxFQUFFLHlCQUF5QjtTQUNuQyxDQUFDLENBQUM7S0FDSjtJQUVELE1BQU0sSUFBSSxHQUFHLElBQUksY0FBSSxDQUFDO1FBQ3BCLEtBQUs7UUFDTCxRQUFRLEVBQUUsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7S0FDMUMsQ0FBQyxDQUFDO0lBR0gsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbEIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUMxQixPQUFPLEVBQUUsY0FBYztLQUN4QixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILGtCQUFlLE1BQU0sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdXRlciB9IGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgVXNlciBmcm9tIFwiLi4vbW9kZWxzL3VzZXJcIjtcbmltcG9ydCAqIGFzIGJjcnlwdCBmcm9tIFwiYmNyeXB0XCI7XG5pbXBvcnQgKiBhcyBqd3QgZnJvbSBcImpzb253ZWJ0b2tlblwiO1xuXG5jb25zdCBKV1RfU0VDUkVUID0gcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCB8fCBcInNlY3JldFwiO1xuXG5jb25zdCByb3V0ZXIgPSBSb3V0ZXIoKTtcblxuaW50ZXJmYWNlIExvZ2luUGF5bG9hZCB7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIHBhc3N3b3JkOiBzdHJpbmc7XG59XG5cbnJvdXRlci5wb3N0KFwiL2FwaS9sb2dpblwiLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgLy8gbG9naW5cbiAgY29uc29sZS5sb2cocmVxLmJvZHkpXG4gIGlmKCFyZXEuYm9keSB8fCAhcmVxLmJvZHkuZW1haWwgfHwgIXJlcS5ib2R5LnBhc3N3b3JkKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgIG1lc3NhZ2U6IFwiTWlzc2luZyBlbWFpbCBvciBwYXNzd29yZFwiLFxuICAgIH0pO1xuICB9XG4gIGNvbnN0IHsgZW1haWwsIHBhc3N3b3JkIH0gPSByZXEuYm9keSBhcyBMb2dpblBheWxvYWQ7XG4gIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRPbmUoeyBlbWFpbCB9KTtcbiAgaWYgKCF1c2VyKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgIG1lc3NhZ2U6IFwiVXNlciBub3QgZm91bmRcIixcbiAgICB9KVxuICB9XG4gIGNvbnN0IGlzUGFzc3dvcmRDb3JyZWN0ID0gYXdhaXQgYmNyeXB0LmNvbXBhcmUocGFzc3dvcmQsIHVzZXIucGFzc3dvcmQpO1xuICBpZiAoIWlzUGFzc3dvcmRDb3JyZWN0KSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgIG1lc3NhZ2U6IFwiUGFzc3dvcmQgaXMgaW5jb3JyZWN0XCIsXG4gICAgfSlcbiAgfVxuICBjb25zdCB0b2tlbiA9IGp3dC5zaWduKHsgdXNlcklkOiB1c2VyLl9pZCB9LCBKV1RfU0VDUkVUKTtcbiAgcmV0dXJuIHJlcy5qc29uKHtcbiAgICB0b2tlbixcbiAgfSk7XG59KTtcblxuaW50ZXJmYWNlIFJlZ2lzdGVye1xuICBlbWFpbDogc3RyaW5nO1xuICBwYXNzd29yZDogc3RyaW5nO1xufVxucm91dGVyLnBvc3QoXCIvYXBpL3JlZ2lzdGVyXCIsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAvLyByZWdpc3RlclxuXG4gIGNvbnN0IHtlbWFpbCwgcGFzc3dvcmR9ID0gcmVxLmJvZHkgYXMgUmVnaXN0ZXI7XG4gIC8vIGNoZWNrIGlmIGVtYWlsIGlzIGFscmVhZHkgaW4gdXNlXG5cbiAgY29uc3QgdXNlcjIgPSBhd2FpdCBVc2VyLmZpbmRPbmUoe2VtYWlsfSk7XG4gIGlmKHVzZXIyKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgIG1lc3NhZ2U6IFwiRW1haWwgaXMgYWxyZWFkeSBpbiB1c2VcIixcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHVzZXIgPSBuZXcgVXNlcih7XG4gICAgZW1haWwsXG4gICAgcGFzc3dvcmQ6IGF3YWl0IGJjcnlwdC5oYXNoKHBhc3N3b3JkLCAxMCksXG4gIH0pO1xuXG4gICAgXG4gIGF3YWl0IHVzZXIuc2F2ZSgpO1xuICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24oe1xuICAgIG1lc3NhZ2U6IFwiVXNlciBjcmVhdGVkXCIsXG4gIH0pO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjsiXX0=