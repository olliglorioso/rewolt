"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const user_1 = require("../models/user");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const JWT_SECRET = process.env.JWT_SECRET || "secret";
const router = (0, express_1.Router)();
router.post("/api/login", async (req, res) => {
    // login
    if (!req.body || !req.body.email || !req.body.password) {
        return res.status(400).json({
            message: "Missing email or password",
        });
    }
    const { email, password } = req.body;
    const user = await user_1.default.findOne({ email });
    if (!user) {
        return res.status(400).json({
            message: "User not found",
        });
    }
    const isPasswordCorrect = await bcrypt.compare(password, user.password);
    if (!isPasswordCorrect) {
        return res.status(400).json({
            message: "Password is incorrect",
        });
    }
    const token = jwt.sign({ userId: user._id }, JWT_SECRET);
    return res.json({
        token: token,
        email: user.email
    });
});
router.post("/api/register", async (req, res) => {
    // register
    const { email, password } = req.body;
    // check if email is already in use
    const user2 = await user_1.default.findOne({ email });
    if (user2) {
        return res.status(400).json({
            message: "Email is already in use",
        });
    }
    const user = new user_1.default({
        email,
        password: await bcrypt.hash(password, 10),
        phone: "+358404839238"
    });
    await user.save();
    return res.status(201).json({
        message: "User created",
    });
});
exports.default = router;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsicm91dGVzL3B1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFpQztBQUNqQyx5Q0FBa0M7QUFDbEMsaUNBQWlDO0FBQ2pDLG9DQUFvQztBQUVwQyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxRQUFRLENBQUM7QUFFdEQsTUFBTSxNQUFNLEdBQUcsSUFBQSxnQkFBTSxHQUFFLENBQUM7QUFPeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUMzQyxRQUFRO0lBQ1IsSUFBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1FBQ3JELE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDMUIsT0FBTyxFQUFFLDJCQUEyQjtTQUNyQyxDQUFDLENBQUM7S0FDSjtJQUNELE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsR0FBRyxDQUFDLElBQW9CLENBQUM7SUFDckQsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUMzQyxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1QsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUMxQixPQUFPLEVBQUUsZ0JBQWdCO1NBQzFCLENBQUMsQ0FBQTtLQUNIO0lBQ0QsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4RSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7UUFDdEIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUMxQixPQUFPLEVBQUUsdUJBQXVCO1NBQ2pDLENBQUMsQ0FBQTtLQUNIO0lBQ0QsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDekQsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ2QsS0FBSyxFQUFFLEtBQUs7UUFDWixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7S0FDbEIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFRSCxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQzlDLFdBQVc7SUFFWCxNQUFNLEVBQUMsS0FBSyxFQUFFLFFBQVEsRUFBQyxHQUFHLEdBQUcsQ0FBQyxJQUFnQixDQUFDO0lBQy9DLG1DQUFtQztJQUVuQyxNQUFNLEtBQUssR0FBRyxNQUFNLGNBQUksQ0FBQyxPQUFPLENBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO0lBQzFDLElBQUcsS0FBSyxFQUFFO1FBQ1IsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUMxQixPQUFPLEVBQUUseUJBQXlCO1NBQ25DLENBQUMsQ0FBQztLQUNKO0lBRUQsTUFBTSxJQUFJLEdBQUcsSUFBSSxjQUFJLENBQUM7UUFDcEIsS0FBSztRQUNMLFFBQVEsRUFBRSxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztRQUN6QyxLQUFLLEVBQUUsZUFBZTtLQUN2QixDQUFDLENBQUM7SUFHSCxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNsQixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzFCLE9BQU8sRUFBRSxjQUFjO0tBQ3hCLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsa0JBQWUsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm91dGVyIH0gZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCBVc2VyIGZyb20gXCIuLi9tb2RlbHMvdXNlclwiO1xuaW1wb3J0ICogYXMgYmNyeXB0IGZyb20gXCJiY3J5cHRcIjtcbmltcG9ydCAqIGFzIGp3dCBmcm9tIFwianNvbndlYnRva2VuXCI7XG5cbmNvbnN0IEpXVF9TRUNSRVQgPSBwcm9jZXNzLmVudi5KV1RfU0VDUkVUIHx8IFwic2VjcmV0XCI7XG5cbmNvbnN0IHJvdXRlciA9IFJvdXRlcigpO1xuXG5pbnRlcmZhY2UgTG9naW5QYXlsb2FkIHtcbiAgZW1haWw6IHN0cmluZztcbiAgcGFzc3dvcmQ6IHN0cmluZztcbn1cblxucm91dGVyLnBvc3QoXCIvYXBpL2xvZ2luXCIsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAvLyBsb2dpblxuICBpZighcmVxLmJvZHkgfHwgIXJlcS5ib2R5LmVtYWlsIHx8ICFyZXEuYm9keS5wYXNzd29yZCkge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICBtZXNzYWdlOiBcIk1pc3NpbmcgZW1haWwgb3IgcGFzc3dvcmRcIixcbiAgICB9KTtcbiAgfVxuICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gcmVxLmJvZHkgYXMgTG9naW5QYXlsb2FkO1xuICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kT25lKHsgZW1haWwgfSk7XG4gIGlmICghdXNlcikge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICBtZXNzYWdlOiBcIlVzZXIgbm90IGZvdW5kXCIsXG4gICAgfSlcbiAgfVxuICBjb25zdCBpc1Bhc3N3b3JkQ29ycmVjdCA9IGF3YWl0IGJjcnlwdC5jb21wYXJlKHBhc3N3b3JkLCB1c2VyLnBhc3N3b3JkKTtcbiAgaWYgKCFpc1Bhc3N3b3JkQ29ycmVjdCkge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICBtZXNzYWdlOiBcIlBhc3N3b3JkIGlzIGluY29ycmVjdFwiLFxuICAgIH0pXG4gIH1cbiAgY29uc3QgdG9rZW4gPSBqd3Quc2lnbih7IHVzZXJJZDogdXNlci5faWQgfSwgSldUX1NFQ1JFVCk7XG4gIHJldHVybiByZXMuanNvbih7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGVtYWlsOiB1c2VyLmVtYWlsXG4gIH0pO1xufSk7XG5cblxuXG5pbnRlcmZhY2UgUmVnaXN0ZXJ7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIHBhc3N3b3JkOiBzdHJpbmc7XG59XG5yb3V0ZXIucG9zdChcIi9hcGkvcmVnaXN0ZXJcIiwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIC8vIHJlZ2lzdGVyXG5cbiAgY29uc3Qge2VtYWlsLCBwYXNzd29yZH0gPSByZXEuYm9keSBhcyBSZWdpc3RlcjtcbiAgLy8gY2hlY2sgaWYgZW1haWwgaXMgYWxyZWFkeSBpbiB1c2VcblxuICBjb25zdCB1c2VyMiA9IGF3YWl0IFVzZXIuZmluZE9uZSh7ZW1haWx9KTtcbiAgaWYodXNlcjIpIHtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgbWVzc2FnZTogXCJFbWFpbCBpcyBhbHJlYWR5IGluIHVzZVwiLFxuICAgIH0pO1xuICB9XG5cbiAgY29uc3QgdXNlciA9IG5ldyBVc2VyKHtcbiAgICBlbWFpbCxcbiAgICBwYXNzd29yZDogYXdhaXQgYmNyeXB0Lmhhc2gocGFzc3dvcmQsIDEwKSxcbiAgICBwaG9uZTogXCIrMzU4NDA0ODM5MjM4XCJcbiAgfSk7XG5cbiAgICBcbiAgYXdhaXQgdXNlci5zYXZlKCk7XG4gIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbih7XG4gICAgbWVzc2FnZTogXCJVc2VyIGNyZWF0ZWRcIixcbiAgfSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyOyJdfQ==