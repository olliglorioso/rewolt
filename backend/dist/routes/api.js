"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const dropoff_1 = require("../models/dropoff");
const order_1 = require("../models/order");
const wolt_1 = require("../lib/wolt");
const dumplocation_1 = require("../lib/dumplocation");
const user_1 = require("../models/user");
const router = (0, express_1.Router)();
router.get("/api/dropoffs", async (req, res) => {
    // get all dropoffs
    const dropoffs = await dropoff_1.default.find({});
    return res.json(dropoffs);
});
router.post("/api/listing/deliveryprice", async (req, res) => {
    // get delivery price
    const { orderId, address } = req.body;
    const order = await order_1.default.findById(orderId);
    if (!order) {
        return res.status(400).json({
            message: "Order not found",
        });
    }
    const dropoff = await dropoff_1.default.findById(order.dropoff);
    if (!dropoff) {
        return res.status(400).json({
            message: "Dropoff not found",
        });
    }
    const fee = await (0, wolt_1.getFee)(dropoff.address, address);
    return res.json({
        fee,
    });
});
router.post("/api/buy", async (req, res) => {
    // buy
    console.log(req.body);
    const { orderId, əddress } = req.body;
    console.log("ADDRESS IS", əddress);
    const order = await order_1.default.findById(orderId);
    if (!order || order.status !== "pending") {
        res.status(400).json({
            message: "Order not found",
        });
        return;
    }
    const dropoff = await dropoff_1.default.findById(order.dropoff);
    if (!dropoff) {
        res.status(400).json({
            message: "Dropoff not found",
        });
        return;
    }
    const seller = await user_1.default.findById(order.user);
    if (!seller) {
        res.status(400).json({
            message: "Seller not found",
        });
        return;
    }
    if (!req.user) {
        res.status(400).json({
            message: "User not found",
        });
        return;
    }
    console.log(dropoff, əddress, seller.email, seller.phone, req.user, order._id);
    const delivery = await (0, wolt_1.createDelivery)(dropoff.address, əddress, `dropoff - ${"Moi"} - ${"comment"}`, {
        name: seller.email,
        phone: seller.phone,
    }, {
        name: req.user.email,
        phone: req.user.phone,
    }, "dogi", "Electronis", order._id.toString(), "koira");
    order.status = "bought";
    await order.save();
    return res.json({
        delivery
    });
});
router.post("/api/fee", async (req, res) => {
    const { dropoffId, category } = req.body;
    const dropoff = await dropoff_1.default.findById(dropoffId);
    if (!dropoff) {
        return res.status(400).json({
            message: "Dropoff not found",
        });
    }
    const dumpLocation = await (0, dumplocation_1.getDumpLocation)(dropoff.lat, dropoff.lon, category);
    const fee = await (0, wolt_1.getFee)(dropoff.address, dumpLocation.streetAddress);
    return res.json(fee);
});
router.get("/api/listing", async (req, res) => {
    if (!req.user) {
        return res.status(401).json({
            message: "Unauthorized",
        });
    }
    const orders = await order_1.default.find({ status: "pending" });
    return res.json(orders);
});
router.post("/api/listing", async (req, res) => {
    try {
        if (!req.user) {
            return res.status(401).json({
                message: "You must be logged in",
            });
        }
        console.log(req.body);
        const { dropoffId, title, category, price } = req.body;
        const dropoff = await dropoff_1.default.findById(dropoffId);
        if (!dropoff) {
            return res.status(400).json({
                message: "Dropoff not found",
            });
        }
        const order = new order_1.default({
            dropoff,
            user: req.user,
            title: title,
            category: category,
            price,
            status: "pending"
        });
        await order.save();
        console.log("ready");
        return res.status(200).json({ "dog": "cat" });
    }
    catch (e) {
        console.log(e);
        return res.status(400);
    }
});
router.post("/api/order", async (req, res) => {
    if (!req.user) {
        return res.status(401).json({
            message: "You must be logged in",
        });
    }
    const { dropoffId, title, category } = req.body;
    const dropoff = await dropoff_1.default.findById(dropoffId);
    if (!dropoff) {
        return res.status(400).json({
            message: "Dropoff not found",
        });
    }
    const dumpLocation = await (0, dumplocation_1.getDumpLocation)(dropoff.lat, dropoff.lon, category);
    let delivery;
    try {
        delivery = await (0, wolt_1.createDelivery)(dropoff.address, dumpLocation.streetAddress, "dropoff box - " + title + " - " + category, {
            name: req.user.email,
            phone: req.user.phone || "+358404342342",
        }, {
            name: dumpLocation.streetAddress,
            phone: dumpLocation.phoneNumber,
        }, title, category, "", "");
        // create a new order and save it to mongodb
    }
    catch (err) {
        return res.status(400).json({
            message: "Error creating delivery",
        });
    }
    return res.json({
        delivery
    });
});
router.get("/api/history", async (req, res) => {
    try {
        const ordersByUser = await order_1.default.find({ user: req.user?._id });
        console.log(ordersByUser);
        return res.status(200).json(ordersByUser);
    }
    catch (err) {
        console.log(err);
        return res.status(400).json({ message: "some error" });
    }
});
exports.default = router;
//# sourceMappingURL=data:application/json;base64,