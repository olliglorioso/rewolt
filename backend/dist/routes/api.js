"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const dropoff_1 = require("../models/dropoff");
const order_1 = require("../models/order");
const wolt_1 = require("../lib/wolt");
const router = (0, express_1.Router)();
router.get("/api/dropoffs", async (req, res) => {
    // get all dropoffs
    const dropoffs = await dropoff_1.default.find({});
    return res.json(dropoffs);
});
router.post("/api/fee", async (req, res) => {
    const { dropoffId } = req.body;
    const dropoff = await dropoff_1.default.findById(dropoffId);
    if (!dropoff) {
        return res.status(400).json({
            message: "Dropoff not found",
        });
    }
    const fee = await (0, wolt_1.getFee)(dropoff.address, "Korkeavuorenkatu 5, 00100 Helsinki");
    return res.json(fee);
});
router.post("/api/order", async (req, res) => {
    if (!req.user) {
        return res.status(401).json({
            message: "You must be logged in",
        });
    }
    const { dropoffId, title, category } = req.body;
    const dropoff = await dropoff_1.default.findById(dropoffId);
    if (!dropoff) {
        return res.status(400).json({
            message: "Dropoff not found",
        });
    }
    const order = new order_1.default({
        dropoff,
        user: req.user,
        title: req.body.title,
        category: req.body.category,
    });
    await order.save();
    let delivery;
    try {
        delivery = await (0, wolt_1.createDelivery)(dropoff.address, "Korkeavuorenkatu 5, 00100 Helsinki", "come fast", {
            name: req.user.email,
            phone: req.user.phone,
        }, {
            name: dropoff.friendlyName,
            phone: "+358404938574",
        }, title, category, order._id.toString());
    }
    catch (err) {
        return res.status(400).json({
            message: "Error creating delivery",
        });
    }
    return res.json({
        order,
        delivery
    });
});
exports.default = router;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsicm91dGVzL2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFpQztBQUNqQywrQ0FBd0M7QUFDeEMsMkNBQW9DO0FBQ3BDLHNDQUFxRDtBQUNyRCxNQUFNLE1BQU0sR0FBRyxJQUFBLGdCQUFNLEdBQUUsQ0FBQztBQUV4QixNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQzdDLG1CQUFtQjtJQUNuQixNQUFNLFFBQVEsR0FBRyxNQUFNLGlCQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3hDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM1QixDQUFDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDekMsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUl6QixDQUFDO0lBQ0YsTUFBTSxPQUFPLEdBQUcsTUFBTSxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNsRCxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ1osT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUMxQixPQUFPLEVBQUUsbUJBQW1CO1NBQzdCLENBQUMsQ0FBQztLQUNKO0lBRUQsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFBLGFBQU0sRUFBQyxPQUFPLENBQUMsT0FBTyxFQUFFLG9DQUFvQyxDQUFDLENBQUM7SUFDaEYsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0FBR0gsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUMzQyxJQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRTtRQUNaLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDMUIsT0FBTyxFQUFFLHVCQUF1QjtTQUNqQyxDQUFDLENBQUM7S0FDSjtJQUNELE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUkxQyxDQUFDO0lBQ0YsTUFBTSxPQUFPLEdBQUcsTUFBTSxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNsRCxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ1osT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUMxQixPQUFPLEVBQUUsbUJBQW1CO1NBQzdCLENBQUMsQ0FBQztLQUNKO0lBQ0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxlQUFLLENBQUM7UUFDdEIsT0FBTztRQUNQLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtRQUNkLEtBQUssRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUs7UUFDckIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUTtLQUM1QixDQUFDLENBQUM7SUFDSCxNQUFNLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNuQixJQUFJLFFBQVEsQ0FBQztJQUNiLElBQUk7UUFDRixRQUFRLEdBQUcsTUFBTSxJQUFBLHFCQUFjLEVBQzdCLE9BQU8sQ0FBQyxPQUFPLEVBQ2Ysb0NBQW9DLEVBQ3BDLFdBQVcsRUFDWDtZQUNFLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUs7WUFDcEIsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSztTQUN0QixFQUNEO1lBQ0UsSUFBSSxFQUFFLE9BQU8sQ0FBQyxZQUFZO1lBQzFCLEtBQUssRUFBRSxlQUFlO1NBQ3ZCLEVBQ0QsS0FBSyxFQUNMLFFBQVEsRUFDUixLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUNyQixDQUFDO0tBQ0g7SUFBQyxPQUFNLEdBQUcsRUFBQztRQUNWLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDMUIsT0FBTyxFQUFFLHlCQUF5QjtTQUNuQyxDQUFDLENBQUM7S0FDSjtJQUVELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQztRQUNkLEtBQUs7UUFDTCxRQUFRO0tBQ1QsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxrQkFBZSxNQUFNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0IERyb3BvZmYgZnJvbSBcIi4uL21vZGVscy9kcm9wb2ZmXCI7XG5pbXBvcnQgT3JkZXIgZnJvbSBcIi4uL21vZGVscy9vcmRlclwiO1xuaW1wb3J0IHsgY3JlYXRlRGVsaXZlcnksIGdldEZlZSB9IGZyb20gXCIuLi9saWIvd29sdFwiO1xuY29uc3Qgcm91dGVyID0gUm91dGVyKCk7XG5cbnJvdXRlci5nZXQoXCIvYXBpL2Ryb3BvZmZzXCIsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAvLyBnZXQgYWxsIGRyb3BvZmZzXG4gIGNvbnN0IGRyb3BvZmZzID0gYXdhaXQgRHJvcG9mZi5maW5kKHt9KTtcbiAgcmV0dXJuIHJlcy5qc29uKGRyb3BvZmZzKTtcbn0pO1xuXG5yb3V0ZXIucG9zdChcIi9hcGkvZmVlXCIsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCB7IGRyb3BvZmZJZCB9ID0gcmVxLmJvZHkgYXMge1xuICAgIGRyb3BvZmZJZDogc3RyaW5nO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgY2F0ZWdvcnk6IHN0cmluZztcbiAgfTtcbiAgY29uc3QgZHJvcG9mZiA9IGF3YWl0IERyb3BvZmYuZmluZEJ5SWQoZHJvcG9mZklkKTtcbiAgaWYgKCFkcm9wb2ZmKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgIG1lc3NhZ2U6IFwiRHJvcG9mZiBub3QgZm91bmRcIixcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IGZlZSA9IGF3YWl0IGdldEZlZShkcm9wb2ZmLmFkZHJlc3MsIFwiS29ya2VhdnVvcmVua2F0dSA1LCAwMDEwMCBIZWxzaW5raVwiKTtcbiAgcmV0dXJuIHJlcy5qc29uKGZlZSk7XG59KTtcblxuXG5yb3V0ZXIucG9zdChcIi9hcGkvb3JkZXJcIiwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIGlmKCFyZXEudXNlcikge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICBtZXNzYWdlOiBcIllvdSBtdXN0IGJlIGxvZ2dlZCBpblwiLFxuICAgIH0pO1xuICB9XG4gIGNvbnN0IHsgZHJvcG9mZklkLCB0aXRsZSwgY2F0ZWdvcnkgfSA9IHJlcS5ib2R5IGFzIHtcbiAgICBkcm9wb2ZmSWQ6IHN0cmluZztcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGNhdGVnb3J5OiBzdHJpbmc7XG4gIH07XG4gIGNvbnN0IGRyb3BvZmYgPSBhd2FpdCBEcm9wb2ZmLmZpbmRCeUlkKGRyb3BvZmZJZCk7XG4gIGlmICghZHJvcG9mZikge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICBtZXNzYWdlOiBcIkRyb3BvZmYgbm90IGZvdW5kXCIsXG4gICAgfSk7XG4gIH1cbiAgY29uc3Qgb3JkZXIgPSBuZXcgT3JkZXIoe1xuICAgIGRyb3BvZmYsXG4gICAgdXNlcjogcmVxLnVzZXIsXG4gICAgdGl0bGU6IHJlcS5ib2R5LnRpdGxlLFxuICAgIGNhdGVnb3J5OiByZXEuYm9keS5jYXRlZ29yeSxcbiAgfSk7XG4gIGF3YWl0IG9yZGVyLnNhdmUoKTtcbiAgbGV0IGRlbGl2ZXJ5O1xuICB0cnkge1xuICAgIGRlbGl2ZXJ5ID0gYXdhaXQgY3JlYXRlRGVsaXZlcnkoXG4gICAgICBkcm9wb2ZmLmFkZHJlc3MsXG4gICAgICBcIktvcmtlYXZ1b3JlbmthdHUgNSwgMDAxMDAgSGVsc2lua2lcIixcbiAgICAgIFwiY29tZSBmYXN0XCIsXG4gICAgICB7XG4gICAgICAgIG5hbWU6IHJlcS51c2VyLmVtYWlsLFxuICAgICAgICBwaG9uZTogcmVxLnVzZXIucGhvbmUsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBkcm9wb2ZmLmZyaWVuZGx5TmFtZSxcbiAgICAgICAgcGhvbmU6IFwiKzM1ODQwNDkzODU3NFwiLFxuICAgICAgfSxcbiAgICAgIHRpdGxlLFxuICAgICAgY2F0ZWdvcnksXG4gICAgICBvcmRlci5faWQudG9TdHJpbmcoKVxuICAgICk7XG4gIH0gY2F0Y2goZXJyKXtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgbWVzc2FnZTogXCJFcnJvciBjcmVhdGluZyBkZWxpdmVyeVwiLFxuICAgIH0pO1xuICB9XG4gIFxuICByZXR1cm4gcmVzLmpzb24oe1xuICAgIG9yZGVyLFxuICAgIGRlbGl2ZXJ5XG4gIH0pO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjsiXX0=